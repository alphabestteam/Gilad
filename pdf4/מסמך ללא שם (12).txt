Threading, Sockets, Requests, Virtual Environments
Threading, Requests:
1.  threads is an object that can execute as many processes as they want in the program at the same time. As you know, the program goes over each line of code and executes it, so it is not possible for another line to run - unless you make another thread that will make another process that will run at the same time.
An example of use - when you have several addresses for websites that you want to run at the same time, then you need to open several threads so that they load together.
2.  We will use the "threading" model.
3.  The requests library is a library responsible for sending HTTP requests. It has several commands such as GET, POST, DELETE, PUT.
These commands allow us functionality with the HTTP protocol.
We would prefer to use this module and not sockets because it allows us more abstraction in access, sockets are more low-level.
requests handle the HTTP protocol process better than sockets.
4.  first time:


download_jpg took 0.7582 seconds to execute
download_jpg took 0.2151 seconds to execute
download_jpg took 0.5659 seconds to execute
download_jpg took 0.3327 seconds to execute


second time:


download_jpg took 0.7882 seconds to execute
download_jpg took 0.2115 seconds to execute
download_jpg took 0.3771 seconds to execute
download_jpg took 0.2519 seconds to execute


Sockets:
1.  A socket is a means of communicating between two components in a network. It is a kind of place that allows sending information or receiving information that will pass through the network.
It is useful when you want to transfer information, for example between a server and a client.
We will not always prefer to use a socket, sometimes there are models that allow the functionality of a socket (and even more), to use built-in protocols.
An example of an alternative to a socket is requests in the HTTP protocol.
2.  The client-server model is a model of transferring information between programs that cooperate with each other. For example sending and receiving information.
This model regulates the load between the server and the client.
The sequence of events in this model is:
• Server:
• Creating a socket
• Bind to address and port
• Listen to start listening
• Accept to connect
• Recv for information
• sendall for sending information back (if desired)


• Customer:
• Creating a socket
• Connect to another socket
someone who listens at the address and port
a certain
• Sendall for sending information
• Recv to receive information back
3.  The parameters received in the constructor of the Socket class are Addressfamily, and the connection type.
Addressfamily is the address family in which the socket should maintain the communication. There are three types:
AF_INET – IPv4 •
AF_INET – IPv6 •
UDS for communication - AF_UNIX •
And the connection type can be TCP \ UDP.
The connection is the way the information will pass (each type has a different way and result of the information that will pass).


Virtual Environments:
1.  Virtual Environments is a folder that contains libraries and content that allows us to be in a virtual environment.
A virtual environment is just like our local computer, but it does not have physical devices, instead it uses the components of the local computer.
It uses them in a way that looks like they are two separate computers.
They are useful to us because sometimes we will want to use the project in the same model but in different versions, and we can do this by setting up a virtual environment.
In addition, you can do experiments in the virtual environment with our project. So that the experiment will not harm our computer locally.
2.  A virtual environment works by creating a new folder that contains the project and the programs that will be in the environment.
3.  To create and use a virtual environment we will first need to install the library by the command: pip3 install virtualenv
Then we will create the environment: virtualenv myVirtualEnv  
After that we will have to activate the environment: source ./myVirtualEnv/bin/activate
4.  I was unable to run the code immediately because the threads library is not installed in this virtual environment.